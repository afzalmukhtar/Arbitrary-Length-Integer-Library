--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Name: Hritika Rahul Mehta
SRN: PES2201800024
Semester: 4
Section: A
PES University Electronic City Campus
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Introduction


1. What is an intal?
Answer:
	An intal (integer of arbitrary length), is an integer library to support mathematical functionalities of very large integers in C. It stores integers in form of a null terminated character array, where the integers are stored as their character value.


2. How is it different from an integer and integer data types supported by C?
Answer:
	C supports maximum of 8 byte size of integer (unsigned long long). Larger numbers will cause an overflow, thereby a loss in data. Floating points truncate the integer value, causing a loss in the exact data, and gives an approximate float value.
An intal is used to prevent this loss in data. Intals can have a variable size array and can increase in size, based on the number of digits of the integer. Thereby no overflow will be caused.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Approach on implementation


1. Addition:

	Addition take place by adding the corresponding numbers starting from the Least Significat Character (LSC) position and till the end of the Most Significant Character (MSC) of the smallest number. If on adding two numbers gives a 2 digit number, then the ten's digit is taken as carry and the one's digit is stored. If the it reaches the end of one number when there is another larger number, then the remaining digits of that number is added to the carry (if any) and stored in the final answer.


2. Compare:

	If l1 is length of intal1 and l2 is length of intal 2, then returns 1 if l1 > l2, and returns -1 if l1 < l2. If l1 = l2, then it performs a lexicographical character comparision throughout the two arrays, and returns 1 if intal1 > intal2, -1 if intal1 < intal2 otherwise returns 0.


3. Difference:

	The greater number is reduced by the smaller number, where the compare operation is used to find the larger and smaller number. The subtraction starts from the LSC position upto the MSC of the smaller number. If the difference give a negetive value, the number is made positive by adding a 10, just like when it is borrow i.e. (7 - 9) = (7 - 9 + 10) = (17 - 9) = 8. If there is a borrowed value, then the next subtraction subtracts the borrowed value from the digits. The final non-negetive answer is returned when it reaches the MSC of the larger number.


4. Multiply:

	It is based on partial product, shift and add. Calculate all the partial products by multiplying each digit of the second number with the first number and adding it with the respective position in the final product array. With each partial product calculated, the shift value is increased so as to perform the addition of the next partial product after performing that shift in index spaces. The process continues till all the partial products have been computed and added to the product array.


5. Modulus:

	Based on a simple division algorithm, where a quotient is estimated using the logic that the quotient is approximately equal to the first length(intal1) - length(intal2) digits of the dividend. 
	Increment the quotient by 1 at the MSC and find the product with the divisor. Compare thr product to the dividende, if the product value is less, then increment the quotient value at the MSC by 1, else decrement the quotient value by 1 and move one step towards the LSC. Continue till the difference of the product and the dividend is less than the divisor. This difference is the modulo.


6. Power:

	Power is the product of the number with itself for n times. using the mathematical relation:
x = a^n = (a^n/2)*(a^n/2) = (a^(n/2 + n/2)) = (a^n) if n is even
x = a^n = (a^n/2)*(a^n/2)*a = (a^(n/2 + n/2 + 1)) = (a^n) if n is odd.


7. Greatest Common Divisor:

	The largest number that factors of both numbers. Euclid's algorithm, follows the principle that the greatest common divisor of two numbers does not change if the larger number is replaced by its difference with the smaller number.
We follow the recursive relation that:
gcd(a, b) = gcd(b, a%b) if a > b
gcd(a, b) = gcd(a, b%a) if a < b
And the base conditions:
gcd(0, b), where b is the result
gcd(a, 0), where a is the result
gcd(a, b), where a = b, then a and b is the result.
Assuming that the gcd(0, 0) is 0.


8. N-th Fibonacci Number:

	Fibonacci Number is the sum of the preceding two numbers. Therefore n-th fibonacci number follows the recursive relation:
F(n) = F(n - 1) + F(n - 2), for all n >= 2
where, F(0) = 0 and F(1) = 1.
	Using this recursive relation, the fibonacci number is calculated till the it reaches the n-th number.


9. Factorial of N:

	Factorial of N is calculated by finding the product of all numbers from 1 to n. It follows the recursive relation:
F(n) = n * F(n - 1), where F(0) = 1.
	This procedure continues till n = 1, on decreasing or till n is reached on increasing.


10. Binomial Coefficient:

	Combinations is represented as nCk. We use the Pascal's Triangle, where the sum of two numbers from the previous row is equal to the Binomial Coefficient of the position, i.e. it follows the recursive relation:
C(n, k) = C(n - 1, k) + C(n - 1, k - 1), where C(n, 0) = C(n , n) = 1.
And C(n, k) = C(n, n - k) is a simple theorem used to reduce steps of calculation. 
	Using one array we follow the above relation as C[x] = C[x] + C[x - 1]. The previous row of the Pascal's triangle is stored in the array from the loop before the current loop. The first loop runs for n-times. The second loop runs for the minimum of n and k. The value at C[k] is returned as the result.


11. Maximum:

	This is based on a simple search algorithm, where the array is is traversed from the start till the end, and each element is compared with an element at the max-index. This max index is updated if the number at any other index is larger than the one present at max index. When the end of the array is reached, the max index is returned.


12. Minimum:

	This is based on a simple search algorithm, where the array is is traversed from the start till the end, and each element is compared with an element at the min-index. This min index is updated if the number at any other index is smaller than the one present at min index. When the end of the array is reached, the min index is returned.


13. Search:

	This is based on a simple search algorithm, where the array is is traversed from the start till the element is found. Each element is compared with the Key. As soon as the Key is found, the current index location is returned. If the Key is not present in the array, then -1 is returned.


14. Binary Search:

	This works on a sorted array. Dividea the array into half, compare the middle element with the key. If mathced, return that index. If the key is smaller than the middle value, search the left(lower) half of the array, else the right(upper) half by dividing that into half and comparing the mid value. -1 is returned if key is not present.


15. Sorting:

	Sorting algorithm is based on a simple divide and conquer technique, where the array is constantly divided into smaller arrays it reaches a single element level. From here, two elements are compared and stored in the array in the sorted order. Then it increases the size of the array and the two new arrays are compared and merged in a sorted. This continues till all the elements are put back into the array in a sorted order.


16. Coin Row Problem:

	Coin row problem is to find the maximum sum of coins that can be obtained if no two adjacent coins are picked. It follows the recursive relation:
Sum(n) = max(Coin(n) + Sum(n - 2), Sum(n - 1)), where n > 1.
Sum(0) = 0 and Sum(1) = C(0). 
When no coin is given the sum is 0. If one coin is given then Sum is equal to the value of that coin. This procedure follows till n is reached and the Sum value at n is returned as the answer.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Functionalities that can be added:

	Division is a widely used arithmetic operation which can be added. This can be used by modulus operation to find mod of a value.
	Coversion of normal integers to intal function is also a neccessary library function that can be added.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
